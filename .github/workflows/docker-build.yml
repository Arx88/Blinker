name: Build, push and deploy

# 1) Run on pushes to main (staging) or upstream (production), 
#    or manually via "Run workflow"
on:
  push:
    branches:
      - main
      - upstream
  workflow_dispatch:

permissions:
  contents: read        # only need to read code
  packages: write       # to push to GHCR

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    # Prevent overlapping runs on the same branch
    concurrency:
      group: build-push-${{ github.ref_name }}
      cancel-in-progress: true

    steps:
      # ───────────── Step 1: Checkout ─────────────
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # ───────── Step 2: Determine branch & env ─────────
      - name: Determine image tag & environment
        id: tag_info
        run: |
          # Strip "refs/heads/" prefix
          BRANCH="${GITHUB_REF#refs/heads/}"
          if [[ "$BRANCH" == "main" ]]; then
            echo "image_tag=latest"      >> $GITHUB_OUTPUT
            echo "environment=staging"   >> $GITHUB_OUTPUT
          elif [[ "$BRANCH" == "upstream" ]]; then
            echo "image_tag=prod"        >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "image_tag=${BRANCH}"   >> $GITHUB_OUTPUT
            echo "environment=staging"   >> $GITHUB_OUTPUT
          fi

      # ───────────── Step 3: Setup Buildx ─────────────
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ──────────── Step 4: Log in to GHCR ────────────
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ──────────── Step 5: Build & Push Image ────────────
      - name: Build & push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend            # adjust if your Dockerfile is elsewhere
          file: ./backend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/${{ github.repository }}/operator-backend:${{ steps.tag_info.outputs.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ────────────── Step 6: Deploy to Staging ─────────────
      - name: Deploy to staging
        if: steps.tag_info.outputs.environment == 'staging'
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.STAGING_HOST }}         # e.g. your staging server IP
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_KEY }}
          script: |
            cd /home/operator/backend
            git pull --ff-only
            docker compose up -d --build

      # ────────────── Step 7: Deploy to Prod ─────────────
      - name: Deploy to production
        if: steps.tag_info.outputs.environment == 'production'
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.PROD_HOST }}            # your prod server IP
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_KEY }}
          script: |
            cd /home/operator/backend
            git pull --ff-only
            docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d --build

      # ────────── (Optional) Notify on Failure ──────────
      - name: Notify Slack on failure
        if: ${{ failure() }}
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": ":x: Build/deploy failed on branch `${{ github.ref_name }}`. <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Logs>."
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
