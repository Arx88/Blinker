---
description: Componentes de negócio implementam funcionalidades específicas da aplicação, localizados em diretórios específicos como @components/thread, @components/billing, etc.
globs: 
alwaysApply: false
---
# Componentes de Negócio

Componentes de negócio implementam funcionalidades específicas da aplicação, localizados em diretórios específicos como [components/thread](mdc:frontend/src/components/thread), [components/billing](mdc:frontend/src/components/billing), etc.

## Organização
1. Componentes de negócio devem ser organizados por domínio/funcionalidade
2. Componentes complexos devem ser divididos em subcomponentes em uma pasta dedicada
3. Estrutura de exemplo:
   ```
   components/
     thread/
       ThreadCard.tsx
       ThreadList.tsx
       tool-views/
         CodeView.tsx
   ```

## Convenções de Implementação
1. Use Server Components quando possível para operações que não requerem interatividade
2. Use Client Components ("use client") apenas quando necessário para interatividade
3. Carregue dados via React Server Components ou Server Actions
4. Para componentes client-side que precisam de dados:
   - Passe dados como props de componentes server-side
   - Use React Query para gerenciamento de estado do servidor

## Responsabilidades
1. Componentes de negócio podem conter lógica específica de domínio
2. Devem delegar apresentação visual para componentes UI quando possível
3. Devem usar Server Actions para mutações de dados
4. Devem implementar tratamento de erros e estados de carregamento

## Exemplos de Componentes de Negócio
- [components/thread/tool-views](mdc:frontend/src/components/thread/tool-views) - Visualizações específicas de ferramentas
- [components/billing](mdc:frontend/src/components/billing) - Componentes relacionados a pagamento
- [components/sidebar](mdc:frontend/src/components/sidebar) - Navegação e estrutura da aplicação

## Boas Práticas
1. Divida componentes grandes em subcomponentes gerenciáveis (< 300 linhas)
2. Mantenha a separação de responsabilidades (UI vs. lógica)
3. Use composição de componentes para reutilização
4. Documente props complexas com comentários

