---
description: Server Actions são funções executadas no servidor para interação com o backend, definidas em @lib/actions.
globs: 
alwaysApply: false
---
# Server Actions

Server Actions são funções executadas no servidor para interação com o backend, definidas em [lib/actions](mdc:frontend/src/lib/actions).

## Estrutura
1. Organize Server Actions por domínio em arquivos separados:
   - [actions/threads.ts](mdc:frontend/src/lib/actions/threads.ts)
   - [actions/teams.ts](mdc:frontend/src/lib/actions/teams.ts)
   - [actions/invitations.ts](mdc:frontend/src/lib/actions/invitations.ts)

2. Use a diretiva "use server" no início de cada arquivo:
   ```typescript
   "use server";
   
   export async function actionName() {
     // implementação
   }
   ```

## Convenções de Nomenclatura
1. Use verbos que descrevem a ação (createThread, updateUser, deleteInvitation)
2. Seja específico sobre a entidade manipulada (createThreadMessage vs createMessage)
3. Mantenha um padrão consistente (get*, create*, update*, delete*)

## Implementação
1. Tipagem explícita de parâmetros e retornos:
   ```typescript
   export async function createThread(
     params: CreateThreadParams
   ): Promise<CreateThreadResult> {
     // implementação
   }
   ```

2. Validação de entrada:
   ```typescript
   import { z } from "zod";
   
   const paramsSchema = z.object({ /* schema */ });
   
   export async function createThread(params: unknown) {
     const validatedParams = paramsSchema.parse(params);
     // continuar com parâmetros validados
   }
   ```

3. Tratamento de erros consistente:
   ```typescript
   try {
     // operação
     return { success: true, data };
   } catch (error) {
     return { 
       success: false, 
       error: error instanceof Error ? error.message : "Erro desconhecido" 
     };
   }
   ```

## Segurança
1. Implemente validação de autenticação em cada action
2. Verifique permissões antes de realizar operações
3. Sanitize inputs para prevenir injeções
4. Limite o escopo de acesso a dados

## Uso em Componentes
1. Em Server Components:
   ```typescript
   import { createThread } from "@/lib/actions/threads";
   
   export default async function Page() {
     const result = await createThread(params);
     // usar resultado
   }
   ```

2. Em Client Components:
   ```typescript
   "use client";
   
   import { createThread } from "@/lib/actions/threads";
   
   export default function Form() {
     async function handleSubmit(formData: FormData) {
       const result = await createThread({
         title: formData.get("title"),
       });
       // tratar resultado
     }
     
     return <form action={handleSubmit}>...</form>;
   }
   ```

## Exemplos de Server Actions
- [actions/threads.ts](mdc:frontend/src/lib/actions/threads.ts) - Operações em threads
- [actions/teams.ts](mdc:frontend/src/lib/actions/teams.ts) - Gerenciamento de equipes

