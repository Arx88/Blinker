---
description: A engenharia de prompts e o processamento de respostas de LLM são componentes críticos para o funcionamento eficaz dos agentes, definidos principalmente em @agent/prompt.py.
globs: 
alwaysApply: false
---
# Formatos de Prompt e Processamento de LLM

A engenharia de prompts e o processamento de respostas de LLM são componentes críticos para o funcionamento eficaz dos agentes, definidos principalmente em [agent/prompt.py](mdc:backend/agent/prompt.py).

## Estrutura de Prompts

1. **Componentes do Prompt**
   - **System Message**: Instruções gerais e personalidade do assistente
   - **Tool Definitions**: Especificações das ferramentas disponíveis
   - **Conversation History**: Histórico da conversa atual
   - **User Message**: Mensagem atual que requer resposta

2. **Formato de Mensagens**
   ```python
   messages = [
       {
           "role": "system",
           "content": SYSTEM_PROMPT
       },
       {
           "role": "user",
           "content": f"Ferramentas disponíveis:\n{TOOL_DEFINITIONS}\n\nPergunta: {query}"
       },
       {
           "role": "assistant",
           "content": "Vou ajudar a responder sua pergunta."
       },
       {
           "role": "user",
           "content": "Nova pergunta aqui"
       }
   ]
   ```

## Formato de Ferramentas

1. **Definição de Ferramenta para Claude**
   ```xml
   <tool name="nome-da-ferramenta">
   <description>
   Descrição detalhada da ferramenta e seu propósito.
   </description>
   <parameters>
     <parameter name="param1" type="string" required="true">
       Descrição do parâmetro 1
     </parameter>
     <parameter name="param2" type="integer" required="false">
       Descrição do parâmetro 2
     </parameter>
   </parameters>
   </tool>
   ```

2. **Definição de Ferramenta para OpenAI**
   ```json
   {
     "type": "function",
     "function": {
       "name": "nome-da-ferramenta",
       "description": "Descrição detalhada da ferramenta e seu propósito.",
       "parameters": {
         "type": "object",
         "properties": {
           "param1": {
             "type": "string",
             "description": "Descrição do parâmetro 1"
           },
           "param2": {
             "type": "integer",
             "description": "Descrição do parâmetro 2"
           }
         },
         "required": ["param1"]
       }
     }
   }
   ```

## Protocolos de Interação

1. **Invocação de Ferramenta (Claude)**
   ```xml
   <tool_call>
     <tool_name>nome-da-ferramenta</tool_name>
     <parameters>
       <param1>valor1</param1>
       <param2>42</param2>
     </parameters>
   </tool_call>
   ```

2. **Resposta de Ferramenta para o LLM**
   ```xml
   <tool_result>
     <result>
       Resultado detalhado da execução da ferramenta.
       Pode conter múltiplas linhas e formatação.
     </result>
   </tool_result>
   ```

## Técnicas de Otimização

1. **Compressão de Histórico**
   - Resumo de conversas longas para economizar tokens
   - Agrupamento de interações relacionadas
   - Remoção de informações redundantes

2. **Formatação Específica por Modelo**
   - Claude: Uso de XML para estruturar chamadas de ferramentas
   - OpenAI: Uso do formato JSON para function calling
   - Ajustes específicos para cada provedor via LiteLLM

3. **Controle de Cache**
   - Marcação de mensagens do sistema como ephemeral
   - Estratégias para minimizar repetição de contexto
   - Gerenciamento eficiente da janela de contexto

## Validação e Extração de Respostas

1. **Parsing de Respostas**
   - Extração de chamadas de ferramentas de respostas XML/JSON
   - Validação de conformidade com o formato esperado
   - Tratamento de respostas incompletas ou malformadas

2. **Regras de Validação**
   - Verificação de parâmetros obrigatórios
   - Tipagem correta de parâmetros
   - Verificação de ferramentas permitidas

## Exemplos de Prompts Específicos

1. **System Prompt Base**
   ```
   Você é um assistente AI especializado em {domínio}.
   Você tem acesso às seguintes ferramentas para ajudar os usuários:
   {lista_ferramentas}
   
   Diretrizes importantes:
   1. Quando precisar usar uma ferramenta, utilize o formato XML exato:
      <tool_call>
        <tool_name>nome-exato-da-ferramenta</tool_name>
        <parameters>
          <param>valor</param>
        </parameters>
      </tool_call>
   
   2. Espere pelo resultado da ferramenta antes de continuar.
   
   3. Sua resposta final deve ser clara, concisa e diretamente relacionada à pergunta do usuário.
   ```

2. **Prompt para Raciocínio Passo-a-Passo**
   ```
   Antes de responder, pense passo a passo sobre o problema.
   
   1. Identifique o que está sendo perguntado.
   2. Determine quais informações você precisa.
   3. Decida quais ferramentas usar para obter essas informações.
   4. Após receber os resultados, analise-os cuidadosamente.
   5. Formule uma resposta completa baseada nas informações obtidas.
   
   Mantenha esse raciocínio interno e estruturado.
   ```

## Boas Práticas

1. **Clareza e Especificidade**
   - Forneça instruções explícitas e detalhadas
   - Evite ambiguidades nas descrições de ferramentas
   - Defina o formato esperado de resposta

2. **Exemplos Few-Shot**
   - Inclua exemplos de uso correto de ferramentas
   - Demonstre o formato esperado para diferentes cenários
   - Mostre o raciocínio desejado através de exemplos

3. **Gestão de Erros**
   - Inclua instruções sobre como lidar com erros de ferramentas
   - Forneça estratégias de fallback
   - Especifique comportamento quando informações são insuficientes

