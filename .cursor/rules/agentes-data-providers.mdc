---
description: Os provedores de dados são classes especializadas que permitem aos agentes acessar fontes externas de informação, localizados em @backend/agent/tools/data_providers.
globs: 
alwaysApply: false
---
# Provedores de Dados para Agentes

Os provedores de dados são classes especializadas que permitem aos agentes acessar fontes externas de informação, localizados em [backend/agent/tools/data_providers](mdc:backend/agent/tools/data_providers).

## Provedores Disponíveis
1. **Provedores de Informações Financeiras**
   - [YahooFinanceProvider.py](mdc:backend/agent/tools/data_providers/YahooFinanceProvider.py) - Dados financeiros da Yahoo Finance
   
2. **Provedores de Redes Sociais**
   - [TwitterProvider.py](mdc:backend/agent/tools/data_providers/TwitterProvider.py) - Dados do Twitter/X
   - [LinkedinProvider.py](mdc:backend/agent/tools/data_providers/LinkedinProvider.py) - Dados do LinkedIn
   
3. **Provedores de E-commerce**
   - [AmazonProvider.py](mdc:backend/agent/tools/data_providers/AmazonProvider.py) - Dados de produtos da Amazon
   
4. **Provedores Imobiliários**
   - [ZillowProvider.py](mdc:backend/agent/tools/data_providers/ZillowProvider.py) - Dados imobiliários do Zillow
   
5. **Provedores de Empregos**
   - [ActiveJobsProvider.py](mdc:backend/agent/tools/data_providers/ActiveJobsProvider.py) - Informações sobre vagas de emprego

## Estrutura Base de Provedores
1. Todos os provedores devem herdar da classe base [RapidDataProviderBase.py](mdc:backend/agent/tools/data_providers/RapidDataProviderBase.py)
2. Estrutura padrão:
   ```python
   class ExampleProvider(RapidDataProviderBase):
       def __init__(self, config):
           super().__init__(config)
           # Inicialização específica
           
       async def search(self, query, max_results=5):
           # Implementação da busca
           # Retorna dados estruturados
           
       async def get_details(self, item_id):
           # Obter detalhes de um item específico
           
       # Métodos auxiliares específicos do provedor
   ```

## Implementação de Provedores
1. Provedores devem implementar pelo menos:
   - Método `search` para busca geral
   - Método `get_details` para obter informações detalhadas
   - Parsers para extrair dados estruturados
   
2. Convenções de implementação:
   - Use requisições assíncronas com aiohttp
   - Implemente tratamento de erros robusto
   - Adicione rate limiting para evitar bloqueios
   - Cache resultados quando apropriado
   - Formate dados de saída de forma consistente
   
3. Requisitos de segurança:
   - Armazene credenciais de forma segura (não hard coded)
   - Implemente retry com backoff exponencial
   - Sanitize dados de entrada e saída
   - Respeite os termos de serviço das APIs/sites

## Integração com Ferramentas
1. Os provedores são acessados através da [data_providers_tool.py](mdc:backend/agent/tools/data_providers_tool.py)
2. A ferramenta de provedores encapsula:
   - Seleção do provedor apropriado
   - Formatação de parâmetros
   - Tratamento de erros unificado
   - Apresentação de resultados para o LLM

## Extensão do Sistema
1. Para adicionar um novo provedor:
   - Crie uma nova classe herdando de RapidDataProviderBase
   - Implemente os métodos obrigatórios
   - Registre o provedor na ferramenta de provedores de dados
   - Documente a API e capacidades do provedor
   - Adicione exemplos de uso para o treinamento do LLM

