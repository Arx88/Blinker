---
description: Hooks personalizados encapsulam lógica reutilizável e são definidos em @hooks.
globs: 
alwaysApply: false
---
# Hooks Personalizados

Hooks personalizados encapsulam lógica reutilizável e são definidos em [hooks](mdc:frontend/src/hooks).

## Princípios de Design
1. Crie hooks para abstrair lógica complexa e reutilizável
2. Um hook deve fazer apenas uma coisa e fazê-la bem
3. Hooks devem ser compostos para funcionalidades mais complexas
4. Use TypeScript para tipar entradas e saídas

## Convenções de Nomenclatura
1. Todos os hooks devem começar com "use" (regra do React)
2. Nomes devem descrever claramente a funcionalidade (ex: useUser, useThreadActions)
3. Use nomes consistentes para operações semelhantes (ex: useXXXQuery, useXXXMutation)

## Estrutura de Hooks
1. Estrutura básica:
   ```typescript
   export function useHookName(params: ParamsType): ReturnType {
     // implementação
     return result;
   }
   ```
2. Documente parâmetros e retornos com comentários JSDoc:
   ```typescript
   /**
    * Hook para gerenciar estado de usuário
    * @param options - Opções de configuração
    * @returns Dados do usuário e funções para manipulação
    */
   ```

## Categorias de Hooks
1. **Hooks de Estado** - Gerenciam estado local complexo
2. **Hooks de Efeito** - Encapsulam efeitos colaterais (eventos, timers)
3. **Hooks de Contexto** - Facilitam acesso a Contextos React
4. **Hooks de Dados** - Interagem com APIs e fontes de dados
5. **Hooks de UI** - Lógica relacionada à interface (ex: useMediaQuery)

## Boas Práticas
1. Mantenha hooks simples e focados (< 100 linhas)
2. Implemente tratamento de erros adequado
3. Use Suspense para operações assíncronas quando apropriado
4. Documente comportamentos não óbvios
5. Adicione tratamento para cleanup no useEffect
6. Evite loops infinitos com useEffect (defina dependencies corretamente)
7. Use memoização (useMemo, useCallback) para otimizar performance

## Exemplos
- useUser - Gerenciamento de estado e ações do usuário
- useThread - Interação com threads de conversa
- useMediaQuery - Responsividade e adaptação de layout

